<?php

/**
 * @file
 * Installation instructions for the Commerce Collector module.
 */

/**
 * Implements hook_requirements().
 */
function commerce_collector_requirements($phase) {
  // Get the appropriate function for translating, to make sure this work during
  // a Drupal installation.
  $t = get_t();

  $requirements['SoapClient'] = array(
    'title' => $t('SoapClient PHP library'),
  );

  // Get the path to the Klarna API directory. Use Libraries API if it's
  // available.
  $is_soap = class_exists('SoapClient');

  if (!$is_soap) {
    $requirements['SoapClient']['value'] = $t('Not included');
    $requirements['SoapClient']['severity'] = REQUIREMENT_ERROR;
  }
  else {
    $requirements['SoapClient']['value'] = $t('Installed');
  }

  return $requirements;
}

/**
 * Implements of hook_uninstall().
 */
function commerce_collector_uninstall() {
  module_load_include('module', 'commerce');
  // Delete any field instance attached to a cod_fee line item.
  commerce_delete_instances('commerce_line_item', 'collector_fee');
}

/**
 * Update all collector payment transactions.
 */
function commerce_collector_update_7100() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_payment_transaction')
      ->propertyCondition('payment_method', 'commerce_collector');
  $result = $query->execute();

  if (!empty($result['commerce_payment_transaction'])) {
    foreach ($result['commerce_payment_transaction'] as $transaction_meta) {
      $transaction = commerce_payment_transaction_load($transaction_meta->transaction_id);
      $transaction->data['country_code'] = 'NO';
      entity_save('commerce_payment_transaction', $transaction);
    }
  }
}
