<?php

/**
 * @file
 * Provides Collector payment method for Drupal Commerce.
 */

/**
 * Remote status messages for Collector.
 */
define('COMMERCE_COLLECTOR_PAYMENT_STATUS_ON_HOLD', 0);
define('COMMERCE_COLLECTOR_PAYMENT_STATUS_PENDING', 1);
define('COMMERCE_COLLECTOR_PAYMENT_STATUS_ACTIVATED', 2);
define('COMMERCE_COLLECTOR_PAYMENT_STATUS_REJECTED', 5);
define('COMMERCE_COLLECTOR_PAYMENT_STATUS_SIGNING', 6);

define('COMMERCE_COLLECTOR_INVOICE_TYPE_DIRECT', 0);
define('COMMERCE_COLLECTOR_INVOICE_TYPE_MONTHLY', 1);
define('COMMERCE_COLLECTOR_INVOICE_TYPE_AGGREGATED', 3);
define('COMMERCE_COLLECTOR_INVOICE_TYPE_INTEREST_FREE', 4);
define('COMMERCE_COLLECTOR_INVOICE_TYPE_ANNUITY', 5);

define('COMMERCE_COLLECTOR_INVOICE_DELIVERY_POST', 1);
define('COMMERCE_COLLECTOR_INVOICE_DELIVERY_EMAIL', 2);

define('COMMERCE_COLLECTOR_INVOICE_ACTIVATION_MANUAL', 0);


/**
 * Implements hook_enable().
 */
function commerce_collector_enable() {
  commerce_product_line_item_configuration(array('type' => 'collector_fee'));
}

/**
 * Implements hook_menu().
 */
function commerce_collector_menu() {
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/commerce_collector/retrieve-invoice'] = array(
    'title' => 'Retrieve invoice',
    'page callback' => 'commerce_collector_admin_get_invoice',
    'page arguments' => array(3, 5),
    'access callback' => 'commerce_collector_payment_transaction_access',
    'access arguments' => array('retrieve', 5),
    'file' => 'commerce_collector.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/commerce_collector/activate-invoice'] = array(
    'title' => 'Activate',
    'page callback' => 'commerce_collector_admin_activate_invoice',
    'page arguments' => array(3, 5),
    'access callback' => 'commerce_collector_payment_transaction_access',
    'access arguments' => array('activate', 5),
    'file' => 'commerce_collector.admin.inc',
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/commerce_collector/deactivate-invoice'] = array(
    'title' => 'Deactivate',
    'page callback' => 'commerce_collector_admin_deactivate_invoice',
    'page arguments' => array(3, 5),
    'access callback' => 'commerce_collector_payment_transaction_access',
    'access arguments' => array('deactivate', 5),
    'file' => 'commerce_collector.admin.inc',
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  return $items;
}

/**
 * Access callback.
 *
 * Verify if payment method is commerce_collector.
 */
function commerce_collector_payment_transaction_access($op, $transaction, $account = NULL) {
  if ($transaction->payment_method != 'commerce_collector') {
    return FALSE;
  }
  if ($transaction->status == COMMERCE_PAYMENT_STATUS_FAILURE && $op == 'deactivate') {
    return FALSE;
  }
  elseif ($transaction->status != COMMERCE_PAYMENT_STATUS_SUCCESS && $op == 'retrieve') {
    return FALSE;
  }
  elseif ($transaction->status != COMMERCE_PAYMENT_STATUS_PENDING && $op == 'activate') {
    return FALSE;
  }
  return commerce_payment_transaction_access('view', $transaction, $account = NULL);
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_collector_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_collector'] = array(
    'title' => t('Collector Invoice'),
    'description' => t('Collector external payment gateway.'),

    'short_title' => t('Collector'),

    // Start as enabled.
    'active' => TRUE,

    // Disable payments in orderâ€™s Payment tab.
    'terminal' => FALSE,

    // Sends user offsite.
    'offsite' => TRUE,

    // Automaticly redirect user offsite.
    'offsite_autoredirect' => TRUE,

    // File to be included.
    'file' => 'commerce_collector.inc',
  );

  return $payment_methods;
}

/**
 * Implements hook_commerce_price_component_type_info().
 */
function commerce_collector_commerce_price_component_type_info() {
  return array(
    'collector_fee' => array(
      'title' => t('Invoice fee'),
      'weight' => 100,
    ),
  );
}

/**
 * Implements hook_commerce_line_item_type_info().
 *
 * Define an collector_fee line-item type.
 */
function commerce_collector_commerce_line_item_type_info() {
  return array(
    'collector_fee' => array(
      'type' => 'collector_fee',
      'name' => t('Invoice fee'),
      'description' => t('Line item for charging an extra fee for Collector payment.'),
      'add_form_submit_value' => t('Add an extra fee'),
      'base' => 'commerce_collector_line_item',
    ),
  );
}

/**
 * Determine the discount's line item title.
 *
 * @return
 *   The line item title.
 */
function commerce_collector_line_item_title() {
  return t('Invoice fee');
}

/**
 * Implements hook_commerce_cart_line_item_refresh().
 *
 * Make sure we delete the collector fee line item if we have one and the
 * payment method is no longer cash on delivery.
 */
function commerce_collector_commerce_cart_line_item_refresh($line_item, $order_wrapper) {
  if ($line_item->type == 'collector_fee') {
    $order = $order_wrapper->value();
    if ((isset($order->data['payment_method']) && strpos($order->data['payment_method'], 'commerce_collector|') !== 0) || isset($order->data['no_payment'])) {
      $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
      $line_item_wrapper->delete();
    }
  }
}

/**
 * Implements hook_commerce_cart_order_refresh().
 *
 * Make sure we delete the collector fee line item if we have one and the
 * payment method is no longer cash on delivery.
 */
function commerce_collector_commerce_cart_order_refresh($order_wrapper) {
  foreach ($order_wrapper->commerce_line_items->getIterator() as $line_item_wrapper) {
    $line_item = $line_item_wrapper->value();
    if ($line_item->type == 'collector_fee') {
      $order = $order_wrapper->value();
      if (isset($order->data['payment_method']) && ($payment_method = commerce_payment_method_instance_load($order->data['payment_method'])) && $payment_method['method_id'] == 'commerce_collector') {
        $settings = $payment_method['settings'];
        _commerce_collector_defaults($settings);
        $fee = $settings['commerce_collector_login']['commerce_collector_fee'];
      }
      if (isset($order->data['no_payment']) || empty($fee)) {
        // Remove the line item from the line item reference field.
        // This will trigger the function that called this hook to save the
        // order because it has changed.
        commerce_entity_reference_delete($order, 'commerce_line_items', 'line_item_id', $line_item->line_item_id);
        // Delete the actual line item.
        commerce_line_item_delete($line_item->line_item_id);
      }
    }
  }
}

/**
 * Implements hook_FORM_ID_alter().
 */
function commerce_collector_form_commerce_payment_payment_transaction_delete_form_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'commerce_collector_payment_transaction_delete_submit';
}

/**
 * Cancel corresponding invoice when removing transaction.
 */
function commerce_collector_payment_transaction_delete_submit($form, &$form_state) {
  $transaction = $form_state['transaction'];
  if ($transaction->payment_method == "commerce_collector") {
    module_load_include('inc', 'commerce_collector', 'commerce_collector');
    if (!commerce_collector_deactivate_invoice($transaction)) {
      drupal_set_message(t('Change status of corresponding invoice in Collector panel manually.'), 'warning');
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 *
 * Extend default transaction view about information from Collector.
 */
function commerce_collector_entity_view_alter(&$build, $type) {
  if ($type == 'commerce_payment_transaction' && isset($build['#entity']->payment_method) && $build['#entity']->payment_method == "commerce_collector") {

    $rows = array();

    // Add Invoice number if present.
    if (isset($build['#entity']->data['response']['InvoiceNo'])) {
      $rows['InvoiceNo'] = array(
        array(
          'data' => t('Invoice number'),
          'header' => TRUE,
        ),
        array(
          'data' => $build['#entity']->data['response']['InvoiceNo'],
        ),
      );
    }

    // InvoiceURL element has to variations.
    if (isset($build['#entity']->data['response']['InvoiceUrl'])) {
      $invoice_url = $build['#entity']->data['response']['InvoiceUrl'];
    }
    elseif (isset($build['#entity']->data['response']['InvoiceURL'])) {
      $invoice_url = $build['#entity']->data['response']['InvoiceURL'];
    }
    // Add Invoice URL if present.
    if (isset($invoice_url)) {
      $rows['InvoiceUrl'] = array(
        array(
          'data' => t('Invoice Url'),
          'header' => TRUE,
        ),
        array(
          'data' => l($invoice_url, $invoice_url, array('absolute' => TRUE)),
        ),
      );
    }

    // Extend default transaction view.
    $build['commerce_collector_invoice'] = array(
      '#theme' => 'table',
      '#header' => array(),
      '#rows' => $rows,
      '#empty' => t('There is no info about invoice registered under this transaction. Try to download it manually.'),
    );
  }
}

/**
 * Payment method: default values.
 */
function _commerce_collector_defaults(&$settings) {
  $settings += array(
    'commerce_collector_login' => array(),
    'commerce_collector_invoice' => array(),
    'commerce_collector_vat' => array(),
  );
  $settings['commerce_collector_login'] += array(
    'commerce_collector_environment' => 'https://ecommercetest.collector.se/v3.0/InvoiceServiceV32.svc?singleWsdl',
    'commerce_collector_username' => NULL,
    'commerce_collector_password' => NULL,
    'commerce_collector_store_id' => NULL,
    'commerce_collector_credit_terms' => '#',
    'commerce_collector_secci' => '#',
    'commerce_collector_fee' => FALSE,
    'commerce_collector_fee_amount' => 0,
  );
  $settings['commerce_collector_invoice'] += array(
    'commerce_collector_invoice_country' => array(),
    'commerce_collector_delivery_address_profile' => NULL,
    'commerce_collector_billing_address_profile' => NULL,
    'commerce_collector_invoice_activation' => COMMERCE_COLLECTOR_INVOICE_ACTIVATION_MANUAL,
    'commerce_collector_invoice_delivery' => COMMERCE_COLLECTOR_INVOICE_DELIVERY_EMAIL,
    'commerce_collector_invoice_type' => COMMERCE_COLLECTOR_INVOICE_TYPE_DIRECT,
    'commerce_collector_invoice_partial_payments' => array(),
  );
  $settings['commerce_collector_vat'] += array(
    'commerce_collector_use_vat_module' => TRUE,
    'commerce_collector_fixed_vat_rate' => 0,
  );
}

/**
 * Validate decimal number.
 */
function _commerce_collector_validate_decimal_number($element, &$form_state) {
  $value = $element['#value'];
  $regexp = '@([^-0-9\\.])|(.-)@';
  if ($value != preg_replace($regexp, '', $value)) {
    form_error($element, t('Invalid number format. Should be decimal with . separator'));
  }
}
