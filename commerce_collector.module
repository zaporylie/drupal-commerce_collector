<?php

/**
 * @file
 * Provides Collector payment method for Drupal Commerce.
 */

/**
 * Remote status messages for Collector.
 */
define('COMMERCE_COLLECTOR_PAYMENT_STATUS_ON_HOLD', 0);
define('COMMERCE_COLLECTOR_PAYMENT_STATUS_PENDING', 1);
define('COMMERCE_COLLECTOR_PAYMENT_STATUS_ACTIVATED', 2);
define('COMMERCE_COLLECTOR_PAYMENT_STATUS_REJECTED', 5);
define('COMMERCE_COLLECTOR_PAYMENT_STATUS_SIGNING', 6);

/**
 * Implements hook_menu().
 */
function commerce_collector_menu() {
  $items['admin/commerce/config/payment-methods/commerce-collector'] = array(
    'title' => 'Commerce Collector settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_collector_settings_form'),
    'access arguments' => array('administer payments'),
    'file' => 'commerce_collector.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/commerce_collector/retrieve-invoice'] = array(
    'title' => 'Retrieve invoice',
    'page callback' => 'commerce_collector_admin_get_invoice',
    'page arguments' => array(3, 5),
    'access callback' => 'commerce_collector_payment_transaction_access',
    'access arguments' => array('view', 5),
    'file' => 'commerce_collector.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/commerce_collector/activate-invoice'] = array(
    'title' => 'Activate invoice',
    'page callback' => 'commerce_collector_admin_activate_invoice',
    'page arguments' => array(3, 5),
    'access callback' => 'commerce_collector_payment_transaction_access',
    'access arguments' => array('view', 5),
    'file' => 'commerce_collector.admin.inc',
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/commerce_collector/deactivate-invoice'] = array(
    'title' => 'Deactivate invoice',
    'page callback' => 'commerce_collector_admin_deactivate_invoice',
    'page arguments' => array(3, 5),
    'access callback' => 'commerce_collector_payment_transaction_access',
    'access arguments' => array('view', 5),
    'file' => 'commerce_collector.admin.inc',
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_collector_permission() {
  return array(
    'commerce collector modify invoice data' => array(
      'title' => t('Modify personal data for invoice'),
      'description' => t('By default data will be taken from billing profile.'),
    ),
  );
}

/**
 * Access callback.
 *
 * Verify if payment method is commerce_collector.
 */
function commerce_collector_payment_transaction_access($op, $transaction, $account = NULL) {
  if ($transaction->payment_method != 'commerce_collector') {
    return FALSE;
  }
  return commerce_payment_transaction_access($op, $transaction, $account = NULL);
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_collector_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_collector'] = array(
    'title' => t('Collector'),
    'description' => t('Collector external payment gateway.'),
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: submit form.
 */
function commerce_collector_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $options = array_intersect_key(country_get_list(), variable_get('commerce_collector_invoice_country', array()));

  // Build wrapper over $order.
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $is_billing_address = FALSE;
  if (isset($wrapper->commerce_customer_billing) && isset($wrapper->commerce_customer_billing->commerce_customer_address)) {
    $is_billing_address = TRUE;
  }
  if ($is_billing_address && isset($wrapper->commerce_customer_billing->commerce_customer_address->country)) {
    $country_code = $wrapper->commerce_customer_billing->commerce_customer_address->country->value();
  }
  else {
    $country_code = NULL;
  }

  $form['country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#required' => TRUE,
    '#default_value' => count($options) == 1 ? key($options) : $country_code,
    '#disabled' => count($options) == 1 ? TRUE : FALSE,
    '#options' => $options,
  );
  $form['personal_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Personal number'),
    '#required' => TRUE,
  );

  // These field are available for users with specific permission.
  // Other users will get it pre-rendered based on billing profile and hidden.
  $form['address'] = array(
    '#access' => user_access('commerce collector modify invoice data'),
    '#tree' => TRUE,
  );
  $form['address']['Firstname'] = array(
    '#type' => 'textfield',
    '#title' => t('First name'),
    '#required' => TRUE,
    '#default_value' => $is_billing_address ? $wrapper->commerce_customer_billing->commerce_customer_address->first_name->value() : '',
  );
  $form['address']['Lastname'] = array(
    '#type' => 'textfield',
    '#title' => t('Last name'),
    '#required' => TRUE,
    '#default_value' => $is_billing_address ? $wrapper->commerce_customer_billing->commerce_customer_address->last_name->value() : '',
  );
  $form['address']['Address1'] = array(
    '#type' => 'textfield',
    '#title' => t('Address 1'),
    '#required' => TRUE,
    '#default_value' => $is_billing_address ? $wrapper->commerce_customer_billing->commerce_customer_address->thoroughfare->value() : '',
  );
  $form['address']['Address2'] = array(
    '#type' => 'textfield',
    '#title' => t('Address 2'),
    '#default_value' => $is_billing_address ? $wrapper->commerce_customer_billing->commerce_customer_address->premise->value() : '',
  );
  $form['address']['COAddress'] = array(
    '#type' => 'textfield',
    '#title' => t('C/o address'),
    '#default_value' => '',
  );
  $form['address']['City'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#required' => TRUE,
    '#default_value' => $is_billing_address ? $wrapper->commerce_customer_billing->commerce_customer_address->locality->value() : '',
  );
  $form['address']['CountryCode'] = array(
    '#type' => 'select',
    '#title' => t('Country Code'),
    '#required' => TRUE,
    '#default_value' => $is_billing_address ? $wrapper->commerce_customer_billing->commerce_customer_address->country->value() : '',
    '#options' => _commerce_collector_get_countries(),
  );
  $form['address']['PostalCode'] = array(
    '#type' => 'textfield',
    '#title' => t('Postal Code'),
    '#required' => TRUE,
    '#default_value' => $is_billing_address ? $wrapper->commerce_customer_billing->commerce_customer_address->postal_code->value() : '',
  );
  $form['address']['CellPhoneNumber'] = array(
    '#type' => 'textfield',
    '#title' => t('Cell phone'),
    '#default_value' => '',
  );
  $form['address']['CompanyName'] = array(
    '#type' => 'textfield',
    '#title' => t('Company name'),
    '#default_value' => '',
  );
  $form['address']['Email'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail address'),
    '#default_value' => '',
  );
  $form['address']['PhoneNumber'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone number'),
    '#default_value' => '',
  );

  $form['confirmation'] = array(
    '#type' => 'checkbox',
    '#title' => t('I accept <a href=@href>general terms and conditions for credit agreement</a>.', array('@href' => variable_get('commerce_collector_agreement_path', ''))),
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_collector_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {

  try {
    // Build wrapper over $order.
    $wrapper = entity_metadata_wrapper('commerce_order', $order);

    $invoice = array(
      'ActivationOption' => variable_get('commerce_collector_invoice_activation', 0),
      'CountryCode' => $pane_values['country'],
      'Currency' => $wrapper->commerce_order_total->currency_code->value(),
    );

    // Add manually one by one to keep it in right order (sic!).
    $invoice['DeliveryAddress'] = array();
    $invoice['DeliveryAddress']['Address1'] = $pane_values['address']['Address1'];
    $invoice['DeliveryAddress']['Address2'] = $pane_values['address']['Address2'];
    $invoice['DeliveryAddress']['COAddress'] = $pane_values['address']['COAddress'];
    $invoice['DeliveryAddress']['City'] = $pane_values['address']['City'];
    $invoice['DeliveryAddress']['CountryCode'] = $pane_values['address']['CountryCode'];
    $invoice['DeliveryAddress']['PostalCode'] = $pane_values['address']['PostalCode'];
    $invoice['DeliveryAddress']['CellPhoneNumber'] = $pane_values['address']['CellPhoneNumber'];
    $invoice['DeliveryAddress']['CompanyName'] = $pane_values['address']['CompanyName'];
    $invoice['DeliveryAddress']['Email'] = $pane_values['address']['Email'];
    $invoice['DeliveryAddress']['Firstname'] = $pane_values['address']['Firstname'];
    $invoice['DeliveryAddress']['Lastname'] = $pane_values['address']['Lastname'];
    $invoice['DeliveryAddress']['PhoneNumber'] = $pane_values['address']['PhoneNumber'];

    // Prevent PHP of pointing to the same memory address (sic!!).
    $invoice['InvoiceAddress'] = array() + $invoice['DeliveryAddress'];
    $invoice['InvoiceDeliveryMethod'] = variable_get('commerce_collector_invoice_delivery', 2);

    $invoice['InvoiceRows'] = array();
    foreach ($wrapper->commerce_line_items->getIterator() as $line) {
      $invoice['InvoiceRows'][] = array(
        'ArticleId' => isset($line->commerce_product) && isset($line->commerce_product) ? $line->commerce_product->sku->value() : $line->getIdentifier(),
        'Description' => isset($line->commerce_product) ? $line->commerce_product->label() : $line->line_item_label->value(),
        'Quantity' => $line->quantity->value(),
        'UnitPrice' => $line->commerce_unit_price->amount->value() / 100,
        'VAT' => commerce_collector_line_item_vat($line->commerce_unit_price->value()),
      );
    }

    $invoice['InvoiceType'] = variable_get('commerce_collector_invoice_type', 0);
    $invoice['OrderNo'] = $order->order_id;
    $invoice['OrderDate'] = format_date($order->created, 'custom', 'Y-m-d\TH:i:sP');
    $invoice['RegNo'] = $pane_values['personal_number'];
  }
  catch (Exception $e) {
    // Set form error if it is not possible to prepare correct request.
    form_set_error('commerce_collector', t('Collector was not able to process payment for provided data. Choose another payment method.'));
    watchdog_exception('commerce_collector', $e);
    return FALSE;
  }

  try {
    // Send request.
    $result = _commerce_collector_request($invoice, 'AddInvoice');
  }
  catch (Exception $e) {
    if (isset($e->faultcode) && $message = _commerce_collector_fault_codes_messages($e->faultcode)) {
      // If error should be presented to customer.
      form_set_error('commerce_collector', $message);
    }
    else {
      // Otherwise.
      form_set_error('commerce_collector', t('Collector was not able to process payment for provided data. Choose another payment method.'));
    }
    // Log exception.
    watchdog('commerce_collector', print_r($e, TRUE), array(), WATCHDOG_ERROR);
    // Prevent changing order status to pending.
    return FALSE;
  }

  // Create and save transaction.
  $transaction = commerce_payment_transaction_new('commerce_collector', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->data['pane_values'] = $pane_values;
  $transaction->data['invoice'] = (array) $result;
  $transaction->remote_id = $result->InvoiceNo;
  $transaction->remote_status = $result->InvoiceStatus;
  if (!commerce_collector_transaction($transaction)) {
    drupal_set_message(t('Unable to process transaction right now, please try again.', 'error'));
    return FALSE;
  }

  // Save transaction specific date in order.
  $order->data['commerce_collector']['pane_values'] = $pane_values;
  $order->data['commerce_collector']['transaction'] = $transaction;
}

/**
 * Calculate VAT for line item.
 *
 * Two methods available - VAT or Fixed Vat Rate (configurable with variable).
 */
function commerce_collector_line_item_vat($unit_price) {
  $use_vat_module = variable_get('commerce_collector_use_vat_module', TRUE);
  // Use vat module based rate or fixed one.
  if (!$use_vat_module) {
    return variable_get('commerce_collector_fixed_vat_rate', 0);
  }
  // Check if price has components.
  if (!isset($unit_price['data']['components'])) {
    return 0;
  }
  // Get all VAT components.
  $components = $unit_price['data']['components'];
  $components = commerce_vat_components($components);
  if (empty($components)) {
    return 0;
  }
  // Get first element only. More than one VAT rate per item is not a common
  // case.
  $vat = reset($components);
  if (!isset($vat['price']['data']['vat_rate_info']['rate'])) {
    return 0;
  }
  // Return vat rate (in percents).
  return $vat['price']['data']['vat_rate_info']['rate'] * 100;
}

/**
 * Creates an example payment transaction for the specified charge amount.
 *
 * @param object $transaction
 *   New or existing transaction.
 *
 * @return bool
 *   TRUE if saved, FALSE if not.
 */
function commerce_collector_transaction(&$transaction) {
  switch ($transaction->remote_status) {
    case COMMERCE_COLLECTOR_PAYMENT_STATUS_ACTIVATED:
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      break;

    case COMMERCE_COLLECTOR_PAYMENT_STATUS_ON_HOLD:
    case COMMERCE_COLLECTOR_PAYMENT_STATUS_PENDING:
    case COMMERCE_COLLECTOR_PAYMENT_STATUS_SIGNING:
      $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
      break;

    case COMMERCE_COLLECTOR_PAYMENT_STATUS_REJECTED:
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      break;
  }

  if ($transaction->remote_status == COMMERCE_COLLECTOR_PAYMENT_STATUS_REJECTED) {
    $transaction->message = 'Invoice @number has been rejected.';
  }
  elseif ($transaction->remote_status == COMMERCE_COLLECTOR_PAYMENT_STATUS_ACTIVATED) {
    $transaction->message = 'Invoice @number has been activated.';
  }
  else {
    $transaction->message = 'Invoice @number has a pending status (@status) now';
  }
  $transaction->message_variables = array(
    '@number' => $transaction->remote_id,
    '@status' => $transaction->remote_status,
  );

  return commerce_payment_transaction_save($transaction);
}

/**
 * Implements hook_commerce_order_presave().
 */
function commerce_collector_commerce_order_presave($order) {
  if (variable_get('commerce_collector_invoice_activation', 0) == 0) {
    // Get order status.
    $status = commerce_order_status_load($order->status);

    // Get all payments for commerce_collector payment method.
    $transactions = commerce_payment_transaction_load_multiple(array(), array(
      'order_id' => $order->order_id,
      'payment_method' => 'commerce_collector',
    ));

    $activated = variable_get('commerce_collector_invoice_activation_state', array('completed'));
    $deactivated = variable_get('commerce_collector_invoice_deactivation_state', array('canceled'));
    foreach ($transactions as $transaction) {
      if (in_array($status['state'], $activated)) {
        if ($transaction->remote_status == COMMERCE_COLLECTOR_PAYMENT_STATUS_REJECTED) {
          // Skip rejected invoices.
          continue;
        }
        commerce_collector_activate_invoice($transaction);
      }
      elseif (in_array($status['state'], $deactivated)) {
        commerce_collector_deactivate_invoice($transaction);
      }
    }
  }
}

/**
 * Activate invoice for payment.
 */
function commerce_collector_activate_invoice($transaction) {

  // If invoice was already canceled.
  if ($transaction->remote_status == COMMERCE_COLLECTOR_PAYMENT_STATUS_ACTIVATED && $transaction->status == COMMERCE_PAYMENT_STATUS_SUCCESS) {
    return TRUE;
  }

  // Remote status was changed but local was outdated.
  if ($transaction->remote_status == COMMERCE_COLLECTOR_PAYMENT_STATUS_ACTIVATED) {
    commerce_collector_transaction($transaction);
    return TRUE;
  }
  try {
    $data = array(
      'CountryCode' => $transaction->data['pane_values']['country'],
      'InvoiceNo' => $transaction->remote_id,
    );
    $result = _commerce_collector_request($data, 'ActivateInvoice');
    $transaction->remote_status = COMMERCE_COLLECTOR_PAYMENT_STATUS_ACTIVATED;
    $transaction->data['invoice'] = (array) $result;
    commerce_collector_transaction($transaction);
    drupal_set_message(t('Invoice @number has been activated.', array('@number' => $transaction->remote_id)));
    return TRUE;
  }
  catch (Exception $e) {
    $uri = commerce_payment_ui_payment_transaction_uri($transaction);
    if (isset($e->faultcode) && $e->faultcode == "s:INVOICE_NOT_FOUND") {
      drupal_set_message(t('Unable to change status of <a href=@href>payment transaction</a>. You cannot change status of invoice which has been already rejected. Create new invoice instead.', array('@href' => url($uri['path']))), 'error');
    }
    else {
      drupal_set_message(t('Unable to change status of <a href=@href>payment transaction</a>. Please contact administrator.', array('@href' => url($uri['path']))), 'error');
    }
    watchdog('commerce_collector', print_r($e, TRUE), array(), WATCHDOG_ERROR);
    return FALSE;
  }
}

/**
 * Deactivate invoice for payment.
 */
function commerce_collector_deactivate_invoice($transaction) {

  // If invoice was already canceled.
  if ($transaction->remote_status == COMMERCE_COLLECTOR_PAYMENT_STATUS_REJECTED && $transaction->status == COMMERCE_PAYMENT_STATUS_FAILURE) {
    return TRUE;
  }

  // Remote status was changed but local was outdated.
  if ($transaction->remote_status == COMMERCE_COLLECTOR_PAYMENT_STATUS_REJECTED) {
    commerce_collector_transaction($transaction);
    return TRUE;
  }
  try {
    $data = array(
      'CountryCode' => $transaction->data['pane_values']['country'],
      'InvoiceNo' => $transaction->remote_id,
    );
    // Try to deactivate invoice.
    $result = _commerce_collector_request($data, 'CancelInvoice');
    // If succeed - change transaction status.
    $transaction->remote_status = COMMERCE_COLLECTOR_PAYMENT_STATUS_REJECTED;
    $transaction->data['invoice'] = (array) $result;
    commerce_collector_transaction($transaction);
    drupal_set_message(t('Invoice @number has been rejected.', array('@number' => $transaction->remote_id)));
    return TRUE;
  }
  catch (Exception $e) {
    $uri = commerce_payment_ui_payment_transaction_uri($transaction);
    if (isset($e->faultcode) && $e->faultcode == "s:INVALID_INVOICE_STATUS") {
      // In case Invoice was activated before try credit it.
      return commerce_collector_credit_invoice($transaction);
    }
    else {
      drupal_set_message(t('Unable to change status of <a href=@href>payment transaction</a>. Please contact administrator.', array('@href' => url($uri['path']))), 'error');
      watchdog('commerce_collector', print_r($e, TRUE), array(), WATCHDOG_ERROR);
      return FALSE;
    }
  }
}

/**
 * Credit invoice.
 */
function commerce_collector_credit_invoice($transaction) {
  try {
    $data = array(
      'CountryCode' => $transaction->data['pane_values']['country'],
      'InvoiceNo' => $transaction->remote_id,
      'CreditDate' => format_date(REQUEST_TIME, 'custom', 'Y-m-d\TH:i:sP'),
    );
    $result = _commerce_collector_request($data, 'CreditInvoice');
    $transaction->remote_status = COMMERCE_COLLECTOR_PAYMENT_STATUS_REJECTED;
    $transaction->data['invoice'] = (array) $result;
    commerce_collector_transaction($transaction);
    drupal_set_message(t('Invoice @number has been credited.', array('@number' => $transaction->remote_id)));
    return TRUE;
  }
  catch (Exception $e) {
    $uri = commerce_payment_ui_payment_transaction_uri($transaction);
    drupal_set_message(t('Unable to change status of <a href=@href>payment transaction</a>. Please contact administrator.', array('@href' => url($uri['path']))), 'error');
    watchdog('commerce_collector', print_r($e, TRUE), array(), WATCHDOG_ERROR);
    return FALSE;
  }
}

/**
 * Implements hook_FORM_ID_alter().
 */
function commerce_collector_form_commerce_payment_payment_transaction_delete_form_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'commerce_collector_payment_transaction_delete_submit';
}

/**
 * Cancel corresponding invoice when removing transaction.
 */
function commerce_collector_payment_transaction_delete_submit($form, &$form_state) {
  $transaction = $form_state['transaction'];
  if ($transaction->payment_method == "commerce_collector") {
    if (!commerce_collector_deactivate_invoice($transaction)) {
      drupal_set_message(t('Change status of corresponding invoice in Collector panel manually.', 'warning'));
    }
  }
}

/**
 * Send request to Collector endpoint and get response.
 *
 * If you want to trigger this function wrap it with try..catch because it will
 * return Exception in case of any problems with request.
 *
 * @param array $data
 *   Array of arguments passed to soap call.
 * @param string $method
 *   Method name should be consistent with Collector specs.
 * @param string $wsdl
 *   WSDL filename corresponding to $method you use.
 * @param string $schema
 *   Name of SOAP schema corresponding to wsdl file.
 *
 * @return mixed
 *   Exception or result object.
 */
function _commerce_collector_request(array $data, $method, $wsdl = 'InvoiceServiceV32.svc', $schema = 'InvoiceService') {
  $environment = variable_get('commerce_collector_environment', 'https://ecommercetest.collector.se/v3.0/');

  $client = new SoapClient($environment . $wsdl . '?singleWsdl', array(
    'trace' => TRUE,
    'features' => SOAP_SINGLE_ELEMENT_ARRAYS,
  ));

  $headers = array();
  $headers[] = new SoapHeader('http://schemas.ecommerce.collector.se/v30/' . $schema, 'ClientIpAddress', $_SERVER['SERVER_ADDR']);
  $headers[] = new SoapHeader('http://schemas.ecommerce.collector.se/v30/' . $schema, 'Username', variable_get('commerce_collector_username', ''));
  $headers[] = new SoapHeader('http://schemas.ecommerce.collector.se/v30/' . $schema, 'Password', variable_get('commerce_collector_password', ''));
  $client->__setSoapHeaders($headers);

  $result = $client->{$method}($data);

  return $result;
}

/**
 * Implements hook_entity_view_alter().
 *
 * Extend default transaction view about information from Collector.
 */
function commerce_collector_entity_view_alter(&$build, $type) {
  if ($type == 'commerce_payment_transaction' && isset($build['#entity']->payment_method) && $build['#entity']->payment_method == "commerce_collector") {

    $rows = array();

    // Add Invoice number if present.
    if (isset($build['#entity']->data['invoice']['InvoiceNo'])) {
      $rows['InvoiceNo'] = array(
        array(
          'data' => t('Invoice number'),
          'header' => TRUE,
        ),
        array(
          'data' => $build['#entity']->data['invoice']['InvoiceNo'],
        ),
      );
    }

    // InvoiceURL element has to variations.
    if (isset($build['#entity']->data['invoice']['InvoiceUrl'])) {
      $invoice_url = $build['#entity']->data['invoice']['InvoiceUrl'];
    }
    elseif (isset($build['#entity']->data['invoice']['InvoiceURL'])) {
      $invoice_url = $build['#entity']->data['invoice']['InvoiceURL'];
    }
    // Add Invoice URL if present.
    if (isset($invoice_url)) {
      $rows['InvoiceUrl'] = array(
        array(
          'data' => t('Invoice Url'),
          'header' => TRUE,
        ),
        array(
          'data' => l($invoice_url, $invoice_url, array('absolute' => TRUE)),
        ),
      );
    }

    // Extend default transaction view.
    $build['commerce_collector_invoice'] = array(
      '#theme' => 'table',
      '#header' => array(),
      '#rows' => $rows,
      '#empty' => t('There is no info about invoice registered under this transaction. Try to download it manually.'),
    );
  }
}

/**
 * Error codes available for user.
 */
function _commerce_collector_fault_codes_messages($code = NULL) {
  $codes = array(
    'DENIED_TO_PURCHASE' => t('Unfortunately you were not approved for using invoice as your payment method. Please choose another payment method to complete your order.'),
    'CREDIT_CHECK_DENIED' => t('Unfortunately you were not approved for using invoice as your payment method. Please choose another payment method to complete your order.'),
    'RESERVATION_NOT_APPROVED' => t('Unfortunately you were not approved for using invoice as your payment method. Please choose another payment method to complete your order.'),
    'PURCHASE_AMOUNT_GREATER_THAN_MAX_CREDIT_AMOUNT' => t('The total value of your shopping cart is too large for the invoice payment method. Please remove some products from your cart or choose another payment method to complete your order.'),
    'INVALID_REGISTRATION_NUMBER' => t('The personal number you supplied is not correct. Please verify the number and try again.'),
    'AGREEMENT_RULES_VALIDATION_FAILED' => t('The personal information you supplied does not match with the information registered in the National Registry. Please verify your information and try again.'),
    'UNHANDLED_EXCEPTION' => t('Technical problem. Please try again later of choose another payment method for completing your order.'),
  );
  if (isset($codes[str_replace('s:', '', $code)])) {
    return $codes[str_replace('s:', '', $code)];
  }
  elseif (isset($code)) {
    return FALSE;
  }
  else {
    return $codes;
  }
}

/**
 * List of countries where Collector is available.
 */
function _commerce_collector_get_countries() {
  $available = array('NO', 'SE', 'DK', 'FI', 'DE', 'AT', 'NL');
  return array_intersect_key(country_get_list(), array_flip($available));
}
